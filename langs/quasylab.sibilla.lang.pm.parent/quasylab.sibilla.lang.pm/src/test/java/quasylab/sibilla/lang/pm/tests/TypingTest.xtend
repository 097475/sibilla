/*
 * generated by Xtext 2.17.0
 */
package quasylab.sibilla.lang.pm.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import quasylab.sibilla.lang.pm.model.Constant
import quasylab.sibilla.lang.pm.model.Model
import quasylab.sibilla.lang.pm.validation.ExpressionType
import quasylab.sibilla.lang.pm.model.Expression
import quasylab.sibilla.lang.pm.validation.ExpressionTypeInference
import org.junit.jupiter.api.Assertions

@ExtendWith(InjectionExtension)
@InjectWith(ModelInjectorProvider)
class TypingTest {
	
	@Inject extension ParseHelper<Model>
	
	@Inject extension ExpressionTypeInference
	
	@Test
	def void intValue() {
		'''10'''.assertContantType(ExpressionType::INTEGER)
		
	}

	@Test
	def void intValueWithExponent() {
		'''10E2'''.assertContantType(ExpressionType::INTEGER)
		
	}

	@Test
	def void realValueNoFraction() {
		'''10.'''.assertContantType(ExpressionType::DOUBLE)
		
	}

	@Test
	def void realValueNoInt() {
		'''.10'''.assertContantType(ExpressionType::DOUBLE)
		
	}
	
	@Test
	def void realValue() {
		'''1.10'''.assertContantType(ExpressionType::DOUBLE)
		
	}
	
	@Test
	def void realValueWithExponent() {
		'''10.0E2'''.assertContantType(ExpressionType::DOUBLE)
		
	}
	
	@Test
	def void trueValue( ) {
		'''true'''.assertContantType(ExpressionType::BOOLEAN)
		
	}	

	@Test
	def void orExpression( ) {
		'''true | false'''.assertContantType(ExpressionType::BOOLEAN)
	}	
	
	@Test
	def void andExpression( ) {
		'''true & false'''.assertContantType(ExpressionType::BOOLEAN)
	}	
	
	@Test
	def void equalExpression( ) {
		'''10 == 5'''.assertContantType(ExpressionType::BOOLEAN)
	}	

	@Test
	def void lessExpression( ) {
		'''10 < 5'''.assertContantType(ExpressionType::BOOLEAN)
	}	
	
	@Test
	def void lessOrEqualExpression( ) {
		'''10 <= 5'''.assertContantType(ExpressionType::BOOLEAN)
	}	

	@Test
	def void greaterExpression( ) {
		'''10 > 5'''.assertContantType(ExpressionType::BOOLEAN)
	}	

	@Test
	def void greaterOrEqualExpression( ) {
		'''10 > 5'''.assertContantType(ExpressionType::BOOLEAN)
	}	
	
	@Test
	def void notEqualExpression( ) {
		'''10 != 5'''.assertContantType(ExpressionType::BOOLEAN)
	}	

	@Test
	def void intSumExpression( ) {
		'''10 + 5'''.assertContantType(ExpressionType::INTEGER)
	}	
	
	@Test
	def void realSumExpression( ) {
		'''10 + 5.0'''.assertContantType(ExpressionType::DOUBLE)
	}	

	@Test
	def void errorSumExpression( ) {
		'''10 + true'''.assertContantType(ExpressionType::ERROR)
	}	

	@Test
	def void ifThenElseIntExpression( ) {
		'''(true?10:11)'''.assertContantType(ExpressionType::INTEGER)
	}	
	
	@Test
	def void ifThenElseRealExpression( ) {
		'''(true?10.0:11)'''.assertContantType(ExpressionType::DOUBLE)
	}	

	@Test
	def void ifThenElseErrorExpression( ) {
		'''(true?true:11)'''.assertContantType(ExpressionType::ERROR)
	}	
	
	
	def assertContantType( CharSequence input, ExpressionType expectedType ) {
		("const test = "+input+";").parse.elements.filter(Constant).last.value.assertType( expectedType )
	}
	
	def assertType( Expression e , ExpressionType expectedType ) {
		Assertions.assertSame( expectedType , e.inferType )
	}
}
