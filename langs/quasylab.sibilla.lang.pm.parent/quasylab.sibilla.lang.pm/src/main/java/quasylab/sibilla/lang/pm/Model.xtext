grammar quasylab.sibilla.lang.pm.Model with org.eclipse.xtext.common.Terminals

generate model "http://www.sibilla.quasylab/lang/pm/Model"

Model:
	(elements += Element)*;
	
Element:
	SpeciesDeclaration 
	| Rule  
	| Constant 
	| Macro 
	| System 
	| Measure
;

System:
	'population' name=ID '=' population=Population ';'
;

Constant:
	'const' name=ID '=' value=Expression ';'
;

Macro:
	'macro' name=ID '=' value=Expression ';'
;

Measure:
	'measure' name=ID '=' value=Expression ';'
;

ReferenceableElement:
	Constant|Macro
;

SpeciesDeclaration returns Species:
	'species' Species ';'
;

Species: 
	name=ID
;

Rule:
	'rule' name=ID ('[' guard=Expression ']')? '=' pre=Population '-[' rate=Expression ']->'  post=Population ';'
;

Population: {Population}
	(population += Multiplicity ("|" population += Multiplicity  )* )? 
;

Multiplicity:
	species=[Species] ('[' size=Expression ']')?
;

Expression:
	OrExpression 
;

OrExpression returns Expression: 
	AndExpression ({OrExpression.left=current} '|' right=AndExpression)*
;

AndExpression returns Expression: 
 RelationExpression ({AndExpression.left=current} '&' right=RelationExpression)*	
;

RelationExpression returns Expression:
	SumDiffExpression ({RelationExpression.left=current} 
		op=RelationOperator
		right=SumDiffExpression
	)?
;

RelationOperator:
	{LessOperator} '<'
	| {LessOrEqualOperator} '<=' 
	| {EqualOperator} '=='
	| {DisEqualOperator} '!='
	| {GreaterOperator} '>'
	| {GreaterOrEqualOperator} '>='
;

MulDivExpression returns Expression:
	ModuloExpression (
		{MulDivExpression.left=current} op=MulDivOperator right=ModuloExpression
	)*	
;

MulDivOperator:
	{MultiplicationOperator} '*'
	| {DivisionOperator} '/'
	| {ZeroDivisionOperator} '//'
;

SumDiffExpression returns Expression:
	MulDivExpression ({SumDiffExpression.left=current} op=SumDiffOperator right=MulDivExpression
	)*
;

SumDiffOperator:
	{SumOperator} '+'
	| {DifferenceOperator} '-'
;

ModuloExpression returns Expression:
	BaseExpression ({ModuloExpression.left=current} '%' right=BaseExpression)*
;

BaseExpression returns Expression:
	NumExpression
	| {TrueLiteral} 'true'
	| {FalseLiteral} 'false'
	| {NotExpression} 	'!' argument=BaseExpression
	| FractionOf
	| NumberOf
	| IfThenElseExpression
	| {NegationExpression} '-' argument=BaseExpression
	| {CallExpression} symbol=[ReferenceableElement]
	| {MinExpression} 'min' '(' args += Expression (',' args +=Expression)+ ')'
	| {MaxExpression} 'max' '(' args += Expression (',' args +=Expression)+ ')'
;


IfThenElseExpression returns Expression:
	'(' Expression ({IfThenElseExpression.guard=current} '?' ifBranch=Expression ':' elseBranch=Expression )? ')'
;

FractionOf:
	'%' agent=[Species] 
;

NumberOf:
	'#' agent=[Species]
;

NumExpression:
	(intPart=INT (isReal ?='.' (decimalPart=INT)? )?
	| isReal ?='.' decimalPart=INT) ('E' exponent=INT)?
;


